from random import randint
from aiogram import Router, F, Bot, html
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from filters.chat_type_filter import ChatTypeFilter
from filters.phone_filter import IsTruePhone
from utils.satesform import StepsFormTroublesWithCard
from keyboards.inline_keyboard import move_to_menu, answer_for_final_question
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
from config_reader import config
from database.dbconnect import Request

router = Router()
router.message.filter(ChatTypeFilter(chat_type=["private"]))
cancel_list = ['–û—Ç–º–µ–Ω–∏—Ç—å', '/cancel', '–æ—Ç–º–µ–Ω–∏—Ç—å', '–û–¢–ú–ï–ù–ê', '–æ—Ç–º–µ–Ω–∞', '–û—Ç–º–µ–Ω–∞', 'jnvtyf', 'cancel']


@router.message(F.text.in_(cancel_list))  # If incorrect answer for previous question
async def cancel_all(message: Message, state: FSMContext):
    await message.answer(
        text=f'–í—ã {html.bold("–æ—Ç–º–µ–Ω–∏–ª–∏")} —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.',
        reply_markup=move_to_menu.adjust(1).as_markup()
    )
    await state.clear()


@router.callback_query(F.data == 'troubles_with_card')
async def cmd_need_help(callback_data: CallbackQuery, state: FSMContext):
    await state.update_data(person_id=callback_data.from_user.id)
    await state.update_data(person_name=callback_data.from_user.username)
    await callback_data.message.answer(
        text=f'{callback_data.from_user.full_name}, –º—ã —Å–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ–π! \n',
        reply_markup=ReplyKeyboardRemove()
    )
    await callback_data.message.answer(
        text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –ø–æ–ª–µ "–°–æ–æ–±—â–µ–Ω–∏–µ" üîΩ(–≤–Ω–∏–∑—É)\n'
             f'{html.bold("P.s –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —É –Ω–∞—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏")}',
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(StepsFormTroublesWithCard.phone_number)


@router.message(StepsFormTroublesWithCard.phone_number, F.text, IsTruePhone())
async def phone_number_written(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await message.answer(
        text=f'–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É–π—Ç–µ –ø—É–Ω–∫—Ç–∞–º –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∏–∂–µ: \n'
             f'1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞—Ä—Ç–µ —Å –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞.\n'
             f'2. –ù–∞–ø–∏—à–∏—Ç–µ —Å —á–µ–º –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤, –Ω–µ —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∞ –Ω–∞ –∫–∞—Å—Å–µ –∏ –ø—Ä–æ—á–µ–µ) \n'
             f'3. –°–∞–º—ã–π –≤–∞–∂–Ω—ã–π –ø—É–Ω–∫—Ç! –û—Ç–ø—Ä–∞–≤–ª—å—Ç–µ –≤—Å–µ –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–Ω–∞—á–µ –º—ã —É–≤–∏–¥–∏–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å \n',
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        text=html.bold('4.–í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å –≤ –ø–æ–ª–µ "–°–æ–æ–±—â–µ–Ω–∏–µ" üîΩ(–≤–Ω–∏–∑—É)'),
    )
    await state.set_state(StepsFormTroublesWithCard.reason_written)


@router.message(StepsFormTroublesWithCard.phone_number)  # If Check user phone number is NO
async def phone_number_written_incorrect(message: Message):
    await message.answer(
        text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ \n'
             f'–ü—Ä–∏–º–µ—Ä—ã: +78007009563 , –∏–ª–∏ 88007009563, –∏–ª–∏ 8007009563\n'
             f'P.s –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —É –Ω–∞—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏',
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(StepsFormTroublesWithCard.reason_written, F.text)
async def request_text_written(message: Message, state: FSMContext):
    await state.update_data(request_text=message.text)
    problem = await state.get_data()
    await message.answer(
        text=f'–í–æ—Ç —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ \n'
             f'–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –î–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É \n'
             f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –û—Ç–º–µ–Ω–∏—Ç—å\n'
             f'P.s. –ï—Å–ª–∏ –≤—ã —á—Ç–æ-—Ç–æ —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É\n'
             f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {problem["phone_number"]}\n'
             f'–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {problem["request_text"]}\n',
        reply_markup=answer_for_final_question.adjust(1).as_markup()
    )
    await state.set_state(StepsFormTroublesWithCard.everything_is_ok_question)


@router.callback_query(StepsFormTroublesWithCard.everything_is_ok_question, F.data == 'answer_for_final_question_yes')
async def answer_is_ok(callback_data: CallbackQuery, bot: Bot, state: FSMContext, request: Request):
    number_of_request = randint(1, 1000000000000)
    problem = await state.get_data()
    await callback_data.message.edit_text(
        text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –õ–°\n',
        reply_markup=move_to_menu.adjust(1).as_markup()
    )
    await bot.send_message(config.main_chat_id,
                           f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #TroublesWithCard{number_of_request}\n'
                           f'–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–ª: @{problem["person_name"]}\n '
                           f'–û–±—ä–µ–∫—Ç: {problem["phone_number"]}\n '
                           f'–ü—Ä–µ–¥–º–µ—Ç: {problem["request_text"]}\n '
                           f'–°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ —Ä–µ—à–µ–Ω–æ')

    await request.add_card_trouble_data(number_of_request, problem['person_id'], problem["person_name"],
                                        problem["phone_number"], problem["request_text"], '‚ùå –ù–µ —Ä–µ—à–µ–Ω–æ')
    await state.clear()


@router.callback_query(StepsFormTroublesWithCard.everything_is_ok_question,
                       F.data == 'answer_for_final_question_cancel')
async def answer_is_cancel(callback_data: CallbackQuery, state: FSMContext):
    await callback_data.message.edit_text(
        text=f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.'
    )
    await state.clear()

    await callback_data.message.answer(
        text=f'–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É',
        reply_markup=move_to_menu.adjust(1).as_markup()
    )


@router.callback_query(StepsFormTroublesWithCard.everything_is_ok_question,
                       F.data == 'answer_for_final_question_recreate')
async def answer_is_rebuild(callback_data: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_data.message.edit_text(
        text=f'–í—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É.'
    )
    await callback_data.message.answer(
        text=f'{callback_data.from_user.full_name}, –º—ã —Å–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ–π \n'
    )
    await callback_data.message.answer(
        text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –ø–æ–ª–µ "–°–æ–æ–±—â–µ–Ω–∏–µ" üîΩ(–≤–Ω–∏–∑—É)\n'
             f'P.s –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —É –Ω–∞—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏'
    )
    await state.set_state(StepsFormTroublesWithCard.phone_number)
